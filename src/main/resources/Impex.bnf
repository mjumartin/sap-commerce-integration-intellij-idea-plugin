/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

{
  parserClass="com.intellij.idea.plugin.hybris.impex.ImpexParser"
  parserUtilClass="com.intellij.idea.plugin.hybris.impex.utils.ImpexParserUtils"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Impex"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.idea.plugin.hybris.impex.psi"
  psiImplPackage="com.intellij.idea.plugin.hybris.impex.psi.impl"

  elementTypeHolderClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes"
  elementTypeClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexElementType"
  tokenTypeClass="com.intellij.idea.plugin.hybris.impex.psi.ImpexTokenType"
}

impexFile ::= root*

private root ::= (CRLF | ( !<<eof>> root_group (CRLF | <<eof>> )))
{recoverWhile = recover_root}

private root_group ::= (
      root_macro_usage
    | header_line
    | value_line
    | comment
    | bean_shell
    | (string (';')?)
    | macro_declaration
)
{recoverWhile = not_line_break}


/*#################################################################################*/
/*                                 Recover Rules                                   */
/*#################################################################################*/


private recover_root ::= !(
     CRLF
  |  HEADER_MODE_INSERT
  |  HEADER_MODE_INSERT_UPDATE
  |  HEADER_MODE_REMOVE
  |  HEADER_MODE_UPDATE
  |  VALUE_SUBTYPE
  |  FIELD_VALUE_SEPARATOR
  |  COMMENT_MARKER
  |  macro_name_dec
  |  BEAN_SHELL_MARKER
  |  DOUBLE_STRING
  |  SINGLE_STRING
  |  MACRO_USAGE
)

private not_line_break ::= !(CRLF)
private not_line_break_or_parameters_separator ::= !(CRLF | PARAMETERS_SEPARATOR)
private recover_parameter_name ::= !(LEFT_SQUARE_BRACKET | LEFT_ROUND_BRACKET | PARAMETERS_SEPARATOR | CRLF)
private recover_header_type ::= !(LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR | CRLF)
private recover_parameters ::= !(CRLF | LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR)
private recover_modifiers ::= !(ALTERNATIVE_PATTERN | COMMA | CRLF | LEFT_SQUARE_BRACKET | PARAMETERS_SEPARATOR | RIGHT_ROUND_BRACKET | LEFT_ROUND_BRACKET)

/*#################################################################################*/
/*                                     Root                                        */
/*#################################################################################*/

root_macro_usage ::= MACRO_USAGE FIELD_VALUE_SEPARATOR*


header_line ::= any_header_mode full_header_type ((PARAMETERS_SEPARATOR full_header_parameter) | PARAMETERS_SEPARATOR)*
{pin = 1}


comment ::= COMMENT_MARKER COMMENT_BODY?
{pin = 1}

macro_value_dec ::= MACRO_VALUE
{mixin = "com.intellij.idea.plugin.hybris.impex.psi.references.ImpexMacrosValueMixin"}

macro_declaration ::=  macro_name_dec ASSIGN_VALUE (
      macro_value_dec
    | SINGLE_STRING
    | DOUBLE_STRING
    | HEADER_SPECIAL_PARAMETER_NAME
    | macro_usage_dec
    | LEFT_ROUND_BRACKET
    | RIGHT_ROUND_BRACKET
    | LEFT_SQUARE_BRACKET
    | RIGHT_SQUARE_BRACKET
    | ASSIGN_VALUE
    | BOOLEAN
    | DIGIT
    | FIELD_VALUE_IGNORE
    | COMMA
    | HEADER_MODE_INSERT
    | HEADER_MODE_UPDATE
    | HEADER_MODE_INSERT_UPDATE
    | HEADER_MODE_REMOVE
    )*
{pin = 2}


bean_shell ::= BEAN_SHELL_MARKER (BEAN_SHELL_BODY | MACRO_USAGE)?
{pin = 1}


string ::= SINGLE_STRING | DOUBLE_STRING
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.impl.ImpexStringMixin"
}


// Value line rules
value_line ::= (VALUE_SUBTYPE value_group*) | (value_group+)

value_group ::= FIELD_VALUE_SEPARATOR value?
{pin = 1}

value ::= (((  FIELD_VALUE
             | FIELD_VALUE_URL
             | BOOLEAN
             | DIGIT
             | string
             | macro_usage_dec
             | FIELD_LIST_ITEM_SEPARATOR
             | DEFAULT_PATH_DELIMITER
             | DEFAULT_KEY_VALUE_DELIMITER
             | ALTERNATIVE_MAP_DELIMITER
            )+
           ) | FIELD_VALUE_IGNORE
         )

macro_usage_dec::=MACRO_USAGE
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElementImpl"
    implements="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElement"
    methods=[getName setName toString]
}

macro_name_dec ::= MACRO_NAME_DECLARATION
{
    mixin="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElementImpl"
    implements="com.intellij.idea.plugin.hybris.impex.psi.ImpexPsiNamedElement"
    methods=[getName setName toString]
}
/*#################################################################################*/
/*                                 Header Line                                     */
/*#################################################################################*/


any_header_mode ::= HEADER_MODE_INSERT | HEADER_MODE_UPDATE | HEADER_MODE_INSERT_UPDATE | HEADER_MODE_REMOVE


full_header_type ::= header_type_name modifiers?
{recoverWhile = not_line_break_or_parameters_separator}

header_type_name ::= HEADER_TYPE
{
    recoverWhile = recover_header_type
    mixin="com.intellij.idea.plugin.hybris.impex.psi.references.ImpexHeaderTypeNameMixin"
}

full_header_parameter ::= any_header_parameter_name parameters? modifiers* parameters?
{pin = 1 recoverWhile = not_line_break_or_parameters_separator}

any_header_parameter_name ::= HEADER_PARAMETER_NAME | HEADER_SPECIAL_PARAMETER_NAME | macro_usage_dec | DOCUMENT_ID | FUNCTION
{
    recoverWhile = recover_parameter_name
    mixin = "com.intellij.idea.plugin.hybris.impex.psi.references.ImpexAnyHeaderParameterNameMixin"
}

/*#################################################################################*/
/*                               Parameters Block                                  */
/*#################################################################################*/


parameters ::= LEFT_ROUND_BRACKET (parameter ((COMMA | ALTERNATIVE_PATTERN) parameter)*)? RIGHT_ROUND_BRACKET
{pin = 1 recoverWhile = recover_parameters}

parameter ::= (HEADER_PARAMETER_NAME | macro_usage_dec | DOCUMENT_ID | FUNCTION) (sub_parameters | ((DOT)? macro_usage_dec))? modifiers*
{pin = 1 mixin = "com.intellij.idea.plugin.hybris.impex.psi.references.ImpexParameterMixin"}

sub_parameters ::= LEFT_ROUND_BRACKET (parameter ((COMMA | ALTERNATIVE_PATTERN) parameter)*)? RIGHT_ROUND_BRACKET
{pin = 1 extends = parameters}

/*#################################################################################*/
/*                                Modifiers Block                                  */
/*#################################################################################*/


modifiers ::= LEFT_SQUARE_BRACKET ((attribute | macro_usage_dec) (ATTRIBUTE_SEPARATOR (attribute | macro_usage_dec))* ) RIGHT_SQUARE_BRACKET
{pin = 1 recoverWhile = recover_modifiers}

attribute ::= any_attribute_name ASSIGN_VALUE any_attribute_value
{pin = 1}

any_attribute_name ::= (ATTRIBUTE_NAME | string)+

any_attribute_value ::= (
  ATTRIBUTE_VALUE
  | BOOLEAN
  | DIGIT
  | string
  | macro_usage_dec
)+
{mixin = "com.intellij.idea.plugin.hybris.impex.psi.references.ImpexAttributeValueMixin"}
